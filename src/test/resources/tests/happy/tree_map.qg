
init {
    out = 0
}

run {
    mapByType = treeMap(:number, :bool)
    out += mapByType.size() // 0
    mapByType.put(5, false)
    mapByType.put(1, true)
    out += mapByType.size() // 2
    if (mapByType.get(5)) {
        out += 4 // 2
    }
    if (mapByType.get(1)) {
        out += 8 // 10
    }
    i = 4
    for (entry in mapByType) {
        // first key should be 1 -> 10 + 1^4 = 11
        // second key should be 5 -> 11 + 5^5 = 3Â 136
        out += pow(entry.getKey(), i++) // key should be 1 -> 10 + 1^4 = 11
    }
    mapByValues = treeMap(mapEntry(5, 16), mapEntry(2, 32))
    out += mapByValues.get(2) // 3 136 + 32 = 3168
    assert(1, mapByType.getOrDefault(6, true))
    assert(2, mapByType.containsKey(5))
    assert(3, mapByType.removeKey(5) == false)
    assert(4, !mapByType.containsKey(5))
    assert(5, mapByType.get(5) == null: bool)
    assert(6, !mapByType.remove(1, false))
    assert(7, mapByType.remove(1, true))
    assert(8, mapByValues.values().size() == 2)
    assert(9, mapByValues.keys().size() == 2)
    mapByValues.put(6, 4)
    assert(10, mapByValues.firstKey() == 2)
    assert(11, mapByValues.firstEntry().getKey() == 2)
    assert(12, mapByValues.firstEntry().getValue() == 32)
    assert(13, mapByValues.nextKey(2) == 5)
    assert(14, mapByValues.nextKey(5) == mapByValues.lastKey())
    assert(15, mapByValues.previousKey(6) == 5)
    mapByValues.removeAllKeys(arrayList(2, 6))
    assert(16, mapByValues.size() == 1)
    assert(17, !mapByValues.containsKey(2))
    assert(18, !mapByValues.containsKey(6))
    mapWithArray = treeMap(mapEntry(1, arrayList(2)))
    assert(19, mapWithArray.get(1).get(0) == 2)

    mapWithReverseOrder = treeMap(::reverseOrder, :number)
    mapWithReverseOrder.put(1, 10)
    mapWithReverseOrder.put(2, 10)
    assert(20, mapWithReverseOrder.firstKey() == 2)
    assert(21, mapWithReverseOrder.lastKey() == 1)
}

input (button, pushed) true

fun reverseOrder(a: number, b: number): number {
    return b - a
}