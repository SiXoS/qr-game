
init {
    out = 0
}

run {
    setByType = treeSet(:number)
    out += setByType.size() // 0
    setByType.add(5)
    setByType.add(1)
    setByType.add(1)
    out += setByType.size() // 2
    if (setByType.contains(5)) {
        out += 4 // 6
    }
    if (setByType.contains(1)) {
        out += 8 // 14
    }
    i = 4
    for (num in setByType) {
        out += num // 20
    }
    setByValues = treeSet(10, 13)
    setByValues.addAll(linkedList(3, 13, 27))
    out += setByValues.size() // 24
    assert(1, setByType.contains(5))
    assert(2, setByType.remove(5))
    assert(3, !setByType.contains(5))
    assert(4, setByValues.first() == 3)
    assert(5, setByValues.next(3) == 10)
    assert(6, setByValues.last() == 27)
    assert(7, setByValues.previous(13) == 10)
    setByValues.removeAll(arrayList(3, 6))
    assert(8, setByValues.size() == 3)
    assert(9, !setByValues.contains(3))

    reverseSortedSet = treeSet(::descendingOrder)
    reverseSortedSet.add(1)
    reverseSortedSet.add(2)
    assert(10, reverseSortedSet.first() == 2)
    assert(11, reverseSortedSet.last() == 1)

    treeSetWithStruct = treeSet(::sortTheStruct)
    treeSetWithStruct.add(new aStructWithTwoNumbers(4,0))
    treeSetWithStruct.add(new aStructWithTwoNumbers(3,1))
    treeSetWithStruct.add(new aStructWithTwoNumbers(3,2))
    theFirst = treeSetWithStruct.first()
    assert(12, theFirst.num1 == 3 && theFirst.num2 == 1)

}

input (button, pushed) true

fun descendingOrder(a: number, b: number): number {
    return b - a
}

fun sortTheStruct(a: aStructWithTwoNumbers, b: aStructWithTwoNumbers): number {
    num1Comparison = a.num1 - b.num1
    return num1Comparison == 0 ? a.num2 - b.num2 : num1Comparison
}

struct aStructWithTwoNumbers {
    num1: number
    num2: number
}